// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    StudySession  StudySession[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum CardCollectionCategory {
    TOP_5000
    PERSONAL
    DEV
}

model CardsCollection {
    id           String                 @id @default(cuid())
    label        String
    description  String
    imgUrl       String
    category     CardCollectionCategory
    createdAt    DateTime               @default(now())
    updatedAt    DateTime               @updatedAt
    cards        Card[]
    StudySession StudySession[]
}

model Card {
    id                String           @id @default(cuid())
    front             String
    back              String
    audioUrl          String
    imgUrl            String
    interval          Int              @default(1)
    nextReview        DateTime         @default(now()) @db.Date
    CardsCollection   CardsCollection? @relation(fields: [cardsCollectionId], references: [id])
    cardsCollectionId String?
    StudySession      StudySession?    @relation(fields: [studySessionId], references: [id])
    studySessionId    String?
}

model StudySession {
    id                String          @id @default(cuid())
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
    expires           DateTime
    user              User            @relation(fields: [userId], references: [id])
    isSessionEnded    Boolean         @default(false)
    studyList         Card[]
    cardsCollection   CardsCollection @relation(fields: [cardsCollectionId], references: [id])
    userId            String
    cardsCollectionId String
}
